{"version":3,"sources":["getWeb3.js","App.js","reportWebVitals.js","serviceWorker.js","index.js"],"names":["getWeb3","Promise","resolve","reject","window","addEventListener","a","ethereum","web3","Web3","enable","console","log","provider","providers","HttpProvider","App","state","loaded","poolBal","yourETH","amount","yourStake","poolAddr","ownerAddr","Multiplier","profitAddr","reward","componentDidMount","eth","getAccounts","accounts","getChainId","networkId","pool","Contract","PoolV2","abi","networks","address","stability","Stability","weth","WETH","sProfit","sPROFITV2","setState","getState","seeReward","alert","error","handleInputChange","event","target","value","type","checked","name","methods","balanceOf","call","result","result4","owner","result5","profitToken","from","result7","userInfo","result9","utils","fromWei","toString","pendingWETH","collectReward","harvest","send","handleDeposit","approve","toWei","stake","handleWithdraw","unstake","english","this","className","id","parseFloat","toFixed","onClick","placeholder","onChange","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.4849456e.chunk.js","sourcesContent":["import Web3 from \"web3\";\n\nconst getWeb3 = () =>\n  new Promise((resolve, reject) => {\n    // Wait for loading completion to avoid race conditions with web3 injection timing.\n    window.addEventListener(\"load\", async () => {\n      // Modern dapp browsers...\n      if (window.ethereum) {\n        const web3 = new Web3(window.ethereum);\n        try {\n          // Request account access if needed\n          await window.ethereum.enable();\n          // Accounts now exposed\n          resolve(web3);\n        } catch (error) {\n          reject(error);\n        }\n      }\n      // Legacy dapp browsers...\n      else if (window.web3) {\n        // Use Mist/MetaMask's provider.\n        const web3 = window.web3;\n        console.log(\"Injected web3 detected.\");\n        resolve(web3);\n      }\n      // Fallback to localhost; use dev console port by default...\n      else {\n        const provider = new Web3.providers.HttpProvider(\n          \"http://127.0.0.1:8545\"\n        );\n        const web3 = new Web3(provider);\n        console.log(\"No web3 instance injected, using Local web3.\");\n        resolve(web3);\n      }\n    });\n  });\n\nexport default getWeb3;\n","import React, { Component } from \"react\";\nimport PoolV2 from \"./abis/PoolV2.json\";\nimport Stability from \"./abis/Stability.json\";\nimport WETH from \"./abis/WETH.json\";\nimport sPROFITV2 from \"./abis/sPROFITV2.json\";\nimport getWeb3 from \"./getWeb3\";\n\nimport \"./App.css\";\n\nclass App extends Component {\n  state = {\n    loaded: false,\n    poolBal: 0,\n    yourETH: 0,\n    amount: 0,\n    yourStake: 0,\n    poolAddr: \"\",\n    ownerAddr: \"\",\n    Multiplier: 0,\n    profitAddr: \"\",\n    reward: 0,\n  };\n\n  componentDidMount = async () => {\n    try {\n      // Get network provider and web3 instance.\n      this.web3 = await getWeb3();\n\n      // Use web3 to get the user's accounts.\n      this.accounts = await this.web3.eth.getAccounts();\n\n      // Get the contract instance.\n      this.networkId = await this.web3.eth.getChainId();\n\n      this.pool = new this.web3.eth.Contract(\n        PoolV2.abi,\n        PoolV2.networks[this.networkId] &&\n          PoolV2.networks[this.networkId].address\n      );\n\n      this.stability = new this.web3.eth.Contract(\n        Stability.abi,\n        Stability.networks[this.networkId] &&\n          Stability.networks[this.networkId].address\n      );\n\n      this.weth = new this.web3.eth.Contract(\n        WETH.abi,\n        WETH.networks[this.networkId] &&\n          WETH.networks[this.networkId].address\n      );\n\n      this.sProfit = new this.web3.eth.Contract(\n        sPROFITV2.abi,\n        sPROFITV2.networks[this.networkId] &&\n          sPROFITV2.networks[this.networkId].address\n      );\n\n      // Set web3, accounts, and contract to the state, and then proceed with an\n      // example of interacting with the contract's methods.\n      this.setState({\n        loaded: true,\n      });\n      this.getState();\n      this.seeReward();\n    } catch (error) {\n      // Catch any errors for any of the above operations.\n      alert(\"Try Metamask.\");\n      console.error(error);\n    }\n  };\n  handleInputChange = (event) => {\n    const target = event.target;\n    const value = target.type === \"checkbox\" ? target.checked : target.value;\n    const name = target.name;\n    this.setState({\n      [name]: value,\n    });\n  };\n\n  getState = async () => {\n    console.log(\"Pool Address:\", PoolV2.networks[this.networkId].address);\n    console.log(\"Pool Address Type:\", typeof(PoolV2.networks[this.networkId].address));\n    let result = await this.stability.methods\n    .balanceOf(\n      PoolV2.networks[this.networkId].address\n    ).call();\n    console.log(\"Profit Token Balance:\", result);\n    console.log(\"Profit Token Balance Type:\", typeof(result));\n    let result4 = await this.weth.methods\n      .balanceOf(this.accounts[0])\n      .call();\n    let result5 = await this.pool.methods.owner().call();\n    let result7 = await this.pool.methods\n      .profitToken()\n      .call({ from: this.accounts[0] });\n    let result9 = await this.pool.methods.userInfo(this.accounts[0]).call();\n    console.log(\"Your Stake:\", result9[0]);\n    console.log(\"Your Stake Type:\", typeof(result9[0]));\n    this.setState({\n      poolBal: this.web3.utils.fromWei(result.toString(), \"Ether\"),\n      yourETH: this.web3.utils.fromWei(result4.toString(), \"Ether\"),\n      poolAddr: PoolV2.networks[this.networkId].address,\n      ownerAddr: result5,\n      profitAddr: result7,\n      yourStake: this.web3.utils.fromWei(result9[0].toString(), \"ether\"),\n    });\n  };\n\n  seeReward = async () => {\n    let result = await this.pool.methods\n      .pendingWETH(this.accounts[0])\n      .call();\n    console.log(\"Earnings:\", result);\n    this.setState({\n      reward: this.web3.utils.fromWei(result, \"ether\") + \" ETH.\",\n    });\n  };\n\n  collectReward = async () => {\n    try {\n      let result = await this.pool.methods\n        .harvest()\n        .send({ from: this.accounts[0] });\n      console.log(result);\n      alert(\"Harvest Earnings Successful!\");\n    } catch (error) {\n      alert(\"You don't have any rewards yet.\");\n    }\n  };\n\n  handleDeposit = async () => {\n    const { amount } = this.state;\n    await this.stability.methods\n      .approve(this.state.poolAddr, this.web3.utils.toWei(amount.toString(), \"ether\"))\n      .send({ from: this.accounts[0] });\n    let result = await this.pool.methods\n      .stake(this.web3.utils.toWei(amount.toString(), \"ether\"))\n      .send({ from: this.accounts[0] });\n    console.log(result);\n    // this.setState({\n    // poolBal: this.web3.utils.fromWei(result.events.Deposit.returnValues._total, 'ether'),\n    // juice: this.web3.utils.fromWei(result.events.Deposit.returnValues._totalTrident, 'ether')\n    // })\n  };\n\n  handleWithdraw = async () => {\n    const { amount } = this.state;\n    let result = await this.pool.methods\n      .unstake(this.web3.utils.toWei(amount, \"ether\"))\n      .send({ from: this.accounts[0] });\n    console.log(result);\n    // this.setState({\n    // poolBal: this.web3.utils.fromWei(result.events.Deposit.returnValues._total, 'ether'),\n    // yourETH: this.state.yourETH -= this.web3.utils.fromWei(result.events.Deposit.returnValues._amount, 'ether')\n    // })\n  };\n\n  english = () => {\n    this.setState({});\n  };\n\n  render() {\n    if (!this.state.loaded) {\n      return (\n        <div className=\"App\">\n          <div className=\"Main\">\n            <h1 className=\"shadowText\">Stability Staking Pool</h1>\n            <p>Stake PROFIT Tokens to Earn.</p>\n            <h2>Total Staked: 0</h2>\n            <h3>Your Stake: {this.state.yourStake}</h3>\n            <h3>Multiplier: {this.state.Multiplier}x</h3>\n            <h3>Earnings: {this.state.reward}</h3>\n            <button type=\"button\" onClick={this.seeReward}>\n              Calculate Earnings\n            </button>\n            <button type=\"button\" onClick={this.collectReward}>\n              Harvest Earnings\n            </button>\n            <h3>Balance: {this.state.yourETH} ETH</h3>\n            <input\n              type=\"text\"\n              placeholder=\"Stake Amount\"\n              name=\"amount\"\n              value={this.state.amount}\n              onChange={this.handleInputChange}\n            />\n            <button type=\"button\" onClick={this.handleDeposit}>\n              Stake\n            </button>\n            <button type=\"button\" onClick={this.handleWithdraw}>\n              Unstake\n            </button>\n          </div>\n          <div className=\"InfoContainer\">\n            Stability Token (PROFIT):\n            <div className=\"InfoBox\">\n              <p>{this.state.profitAddr}</p>\n            </div>\n          </div>\n        </div>\n      );\n    } else {\n      return (\n        <div className=\"App\">\n          <div id=\"Main\"></div>\n          <div className=\".container\">\n            <div className=\"Main\">\n              <h1 className=\"shadowText\">Stability Staking Pool</h1>\n              <p>Stake PROFIT Tokens to Earn. </p>\n              <p>Multiplier: 5x</p>\n              <h2 className=\"shadowTextStrong\">\n                Total Staked: {parseFloat(this.state.poolBal).toFixed(5)}\n                <p className=\"shadowTextStrong\">\n                  Your Stake: {parseFloat(this.state.yourStake).toFixed(5)}\n                </p>\n              </h2>\n              <p>Balance: {parseFloat(this.state.yourETH).toFixed(5)} ETH</p>\n              <h3 className=\"shadowTextStrong\">\n                {\" \"}\n                Earnings: {parseFloat(this.state.reward).toFixed(5)}{\" \"}\n              </h3>\n              <div className=\"row\">\n                <button type=\"button\" onClick={this.seeReward}>\n                  Calculate Earnings\n                </button>\n                <button type=\"button\" onClick={this.collectReward}>\n                  Harvest Earnings\n                </button>\n              </div>\n              <div className=\"row\">\n                <input\n                  type=\"text\"\n                  placeholder=\"Stake Amount\"\n                  name=\"amount\"\n                  value={this.state.amount}\n                  onChange={this.handleInputChange}\n                />\n                <button type=\"button\" onClick={this.handleDeposit}>\n                  Stake\n                </button>\n                <button type=\"button\" onClick={this.handleWithdraw}>\n                  Unstake\n                </button>\n              </div>\n            </div>\n          </div>\n          <div className=\"InfoContainer\">\n            Stability Token (PROFIT)\n            <div className=\"InfoBox\">\n              <p>{this.state.profitAddr}</p>\n            </div>\n          </div>\n        </div>\n      );\n    }\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}